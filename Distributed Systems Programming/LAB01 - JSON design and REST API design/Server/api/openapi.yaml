openapi: 3.0.1
info:
  title: Film Library
  description: "A **simple application** to manage different films, requesting and\
    \ providing reviews and logging into a database full of contents! **Check it out!**"
  version: "1.0"
servers:
- url: http://localhost/
tags:
- name: Films Collection
  description: Operations about the complete list of films in the database.
- name: Film
  description: Operations about a specific film in the database.
- name: Users
  description: Operations about the users (login and logout included).
- name: Invitations
  description: Operations about issued invitations.
paths:
  /api/users/authenticator:
    post:
      tags:
      - Users
      summary: Login API to authenticate an user.
      description: Users who want to authenticate themselves should provide a valid
        `username` and `password` in order to log into the application and receive
        a **session cookie**. The session cookie will be used for subsequent requests
        in order to authenticate the user to the specific APi.
      operationId: login
      parameters: []
      requestBody:
        description: The request body contains `username` (email) and `password` of
          the user who wants to authenticate.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
            example:
              username: frank.stein@polito.it
              password: shelley97
        required: true
      responses:
        "201":
          description: Created
          headers:
            Set-Cookie:
              description: The authenticator session cookie (JWT token)
              style: simple
              explode: false
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
              example:
                userId: 2
                email: frank.stein@polito.it
                name: Frank
          links:
            getUser:
              operationRef: "#paths~1api~1users~1{userId}/get"
              parameters:
                userId: $response.body#/userId
              description: "The `userId` returned in the response can be used as the\
                \ `userId` parameter in `GET api/users/{userId}`."
        "400":
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody!
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Incorrect username or password.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      x-swagger-router-controller: Users
    delete:
      tags:
      - Users
      summary: Logout API to de-authenticate an user.
      description: Users who want to logout from the application should provide their
        valid **session cookie**.
      operationId: logout
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody!
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid session token.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Users
  /api/users:
    get:
      tags:
      - Users
      summary: Get the whole list of users.
      description: The whole list of users can be accessed only by the server admin
        who can access the API with a special token.
      operationId: getUsers
      parameters:
      - name: pageNo
        in: query
        description: "The id of the requested page (if absent, the first page is returned)"
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
              example:
              - userId: 1
                email: user.dsp@polito.it
                name: User
                password: password
              - userId: 2
                email: frank.stein@polito.it
                name: Frank
                password: shelley97
              - userId: 3
                email: karen.makise@polito.it
                name: Karen
                password: fg204v213
              - userId: 4
                email: rene.regeay@polito.it
                name: Rene
                password: historia
              - userId: 5
                email: beatrice.golden@polito.it
                name: Beatrice
                password: seagulls
              - userId: 6
                email: arthur.pendragon@polito.it
                name: Arthur
                password: holygrail
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody!
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Users
  /api/users/{userId}:
    get:
      tags:
      - Users
      summary: Retrieve the information about a specific user.
      description: The available information (password excluded) about the user is
        retrieved.
      operationId: getUserByID
      parameters:
      - name: userId
        in: path
        description: The identifier of the user.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/review'
              example:
                userId: 2
                email: frank.stein@polito.it
                name: Frank
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Film not found.
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Users
  /api/films/public:
    get:
      tags:
      - Films Collection
      summary: Get the whole list of public films.
      description: "The whole list of public films can be viewed both by an authenticated\
        \ user and a non-authenticated one. When a list of films is retrieved, a **pagination\
        \ mechanism** is implemented, in order to limit the size of the messages the\
        \ service sends back."
      operationId: getPublicFilms
      parameters:
      - name: pageNo
        in: query
        description: "The id of the requested page (if absent, the first page is returned)"
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
              example:
              - filmId: 2
                title: Heaven's Feel
                owner: 2
                private: false
              - filmId: 3
                title: You Can (Not) Redo
                owner: 1
                private: false
              - filmId: 4
                title: Weathering With You
                owner: 1
                private: true
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody!
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      x-swagger-router-controller: FilmsCollection
  /api/films/created:
    get:
      tags:
      - Films Collection
      summary: Get the list of films created by the user.
      description: "An authenticated user can retrieve the list of films that she\
        \ created.  When a list of films is retrieved, a **pagination mechanism**\
        \ is implemented, in order to limit the size of the messages the service sends\
        \ back."
      operationId: getCreatedFilms
      parameters:
      - name: pageNo
        in: query
        description: "The id of the requested page (if absent, the first page is returned)"
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
              example:
              - filmId: 1
                title: Your Name
                owner: 1
                private: true
                watchdate: 2021-10-03
                rating: 9
                favorite: true
              - filmId: 3
                title: You Can (Not) Redo
                owner: 1
                private: false
              - filmId: 4
                title: Weathering With You
                owner: 1
                private: true
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody!
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: FilmsCollection
  /api/films/invited:
    get:
      tags:
      - Films Collection
      summary: Get review invitations to the user.
      description: "Get the list of films for which the authenticated user has been\
        \ invited to review.  When a list of films is retrieved, a **pagination mechanism**\
        \ is implemented, in order to limit the size of the messages the service sends\
        \ back."
      operationId: getInvitedFilms
      parameters:
      - name: pageNo
        in: query
        description: "The id of the requested page (if absent, the first page is returned)"
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
              example:
              - filmId: 3
                title: You Can (Not) Redo
                owner: 1
                private: false
              - filmId: 4
                title: Weathering With You
                owner: 1
                private: true
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody!
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: FilmsCollection
  /api/films:
    post:
      tags:
      - Films Collection
      summary: Create a new film.
      description: Authenticated users of the application can create a new film. An
        unique `filmId` will be automatically generated.
      operationId: addFilm
      parameters: []
      requestBody:
        description: The new film to be added to the application. The user must provide
          a title and define the film either as `private` or `public`.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/film'
            example:
              title: Godfather I
              private: false
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
              example:
                filmId: 12
                title: Godfather I
                owner: 1
                private: false
          links:
            getFilm:
              operationRef: "#paths~1api~1films~1{filmID}/get"
              parameters:
                filmId: $response.body#/filmId
              description: "The `filmId` returned in the response body can be used\
                \ to retrieve the film in the operation `GET /api/films/{filmsId}`"
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: FilmsCollection
  /api/films/{filmId}:
    get:
      tags:
      - Film
      summary: Retrieve a single public or private film element.
      description: "A single public film can be viewed both by an authenticated user\
        \ and a non-authenticated one. On the other hand, if a film is marked as private,\
        \ a JWT identifying the owner must be provided. The film is identified by\
        \ its unique `filmId`."
      operationId: getFilm
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'
              example:
                filmId: 1
                title: Your Name
                owner: 1
                private: true
                watchdate: 2021-10-03
                rating: 9
                favorite: true
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Film not found.
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      x-swagger-router-controller: Film
    put:
      tags:
      - Film
      summary: Update an existing film.
      description: "An authenticated user can update an existing film, if she is the\
        \ owner of the film. However, this operation does not allow changing its visibility\
        \ from `public` to `private` (and viceversa)."
      operationId: editFilm
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film to be modified.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 2
      requestBody:
        description: The changes to be applied to the film.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/film'
            example:
              title: Godfather II
        required: true
      responses:
        "204":
          description: No content
          content: {}
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Film not found.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Film
    delete:
      tags:
      - Film
      summary: Remove an existing film.
      description: "An authenticated user can delete an existing film, if she is the\
        \ owner of the film."
      operationId: removeFilm
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1
      responses:
        "204":
          description: No content
          content: {}
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Film
  /api/films/{filmId}/reviews:
    get:
      tags:
      - Film
      summary: Retrieve the list of reviews for this film.
      description: "The whole list of reviews for a certain film can be viewed both\
        \ by an authenticated user and a non-authenticated one. When a list of reviews\
        \ is retrieved, a pagination mechanism is recommended, in order to limit the\
        \ size of the messages the service sends back."
      operationId: getReviews
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film whose reviews need to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 2
      - name: pageNo
        in: query
        description: "The identifier of the requested page (if absent, the first page\
          \ is returned)"
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
              example:
              - filmId: 2
                userId: 5
                completed: true
                reviewDate: 2022-03-04
                rating: 10
                review: This film is a perfect conclusion for the trilogy.
              - filmId: 2
                userId: 1
                completed: true
                rating: 8
                reviewDate: 2022-10-11
                review: "I could not stop watching until the very end. However, you\
                  \ must watch the prequels before this film to really understand\
                  \ it."
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Film not found.
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      x-swagger-router-controller: Film
  /api/films/{filmId}/reviews/{userId}:
    get:
      tags:
      - Film
      summary: Retrieve a specific review for this film.
      description: The reviews for a certain film can be viewed both by an authenticated
        user and a non-authenticated one. A specific review is identified both by
        the `filmId` of the film and the `userId` of the user who wrote the review.
      operationId: getReview
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film whose review needs to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 2
      - name: userId
        in: path
        description: The identifier of the user whose review needs to be retrieved.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/review'
              example:
                filmId: 2
                userId: 1
                completed: true
                rating: 8
                reviewDate: 2022-10-11
                review: "I could not stop watching until the very end. However, you\
                  \ must watch the prequels before this film to really understand\
                  \ it."
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Film not found.
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      x-swagger-router-controller: Film
  /api/films/{filmId}/invitations:
    put:
      tags:
      - Invitations
      summary: Mark a review as completed.
      description: "A reviewer invited for a film can mark the review as completed,\
        \ also updating the review date, the rating and the textual description of\
        \ the review."
      operationId: completeInvitationForUser
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film whose review has to be marked as completed.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1
      requestBody:
        description: "It contains the review date, the rating and the textual description\
          \ of the review."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/review'
            example:
              reviewDate: 2022-03-04
              rating: 10
              review: This film is a perfect conclusion for the trilogy.
        required: true
      responses:
        "204":
          description: No content
          content: {}
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Forbidden.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Invitations
    post:
      tags:
      - Invitations
      summary: Issue review(s) invitation to specific user(s).
      description: The owner of a public film can issue a review invitation to a user
        (the reviewer may be the **owner herself**). Review invitations for a film
        can be **issued to multiple users at the same time**.
      operationId: issueInvitationToUsers
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film to be reviewed.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1
      requestBody:
        description: It contains the identifiers of the users(s) (`userId`) whom have
          been invited to review the film.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filmId_invitations_body'
            example:
              users:
              - 1
              - 2
              - 3
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/review'
              example:
              - filmId: 4
                userId: 1
                completed: false
              - filmId: 4
                userId: 2
                completed: false
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Forbidden.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Invitations
  /api/films/{filmId}/invitations/{userId}:
    delete:
      tags:
      - Invitations
      summary: Remove an issued review invitation.
      description: "The owner of a film can remove a review invitation, if the review\
        \ has not yet been completed by the reviewer."
      operationId: removeInvitationFromUser
      parameters:
      - name: filmId
        in: path
        description: The identifier of the film whose review has to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1
      - name: userId
        in: path
        description: The identifier of the user whose review has to be removed.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        example: 1
      responses:
        "204":
          description: No content
          content: {}
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Invalid requestBody.
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Must log in first.
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Forbidden.
        "500":
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the server error.
        "505":
          description: Network Error
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example: Reason(s) for the network error.
      security:
      - bearerAuth: []
      x-swagger-router-controller: Invitations
components:
  schemas:
    user:
      required:
      - name
      - userId
      type: object
      properties:
        userId:
          pattern: "USER_[0-9]{10}"
          type: string
          description: An unique identifier of the user data structure in the Film
            Manager service (mandatory).
        name:
          type: string
          description: Username of the user.
        email:
          type: string
          description: "email address of the user, which must be used for the authentication\
            \ to the service (mandatory, it must be a valid email address)."
          format: email
        password:
          maxLength: 20
          minLength: 6
          type: string
          description: "The user's password, which must be used for the authentication\
            \ to the service."
      example:
        password: password
        name: name
        userId: userId
        email: ""
    film:
      required:
      - filmId
      - owner
      - private
      - title
      type: object
      properties:
        filmId:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          type: string
          description: An unique identifier of the film data structure in the Film
            Manager service (mandatory).
        title:
          type: string
          description: Textual title of the film (mandatory).
        owner:
          pattern: "USER_[0-9]{10}"
          type: string
          description: "The id of the film data structure owner, i.e., the user who\
            \ created it (mandatory)."
        private:
          type: boolean
          description: "A mandatory Boolean property, set to true if the film data\
            \ structure is marked as private, false if it is public (default value:\
            \ true). A film data structure is said private if only its owner can access\
            \ it, public if every user can access it"
        watchdate:
          type: string
          description: "The date when the film was watched by the owner, expressed\
            \ in the YYYY-MM-DD format."
          format: date
        rating:
          maximum: 10
          minimum: 0
          type: integer
          description: This property can be included in the film data structure only
            if private is true.
        favorite:
          type: boolean
          description: This property can be included in the film data structure only
            if private is true.
          default: false
      example:
        owner: owner
        watchdate: 2000-01-23
        private: true
        filmId: filmId
        rating: 5
        title: title
        favorite: false
    review:
      type: object
      properties:
        filmId:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          type: string
          description: An unique identifier of the film for which a review invitation
            has been issued (mandatory).
        userId:
          pattern: "USER_[0-9]{10}"
          type: string
          description: An unique identifier of the user who has received the review
            invitation (mandatory).
        completed:
          type: boolean
          description: "A mandatory Boolean property, set to true if the review has\
            \ been completed, false otherwise."
          default: false
        reviewDate:
          type: string
          description: "This property can be included only if completed is true, and\
            \ in that case it is mandatory."
          format: date
        rating:
          maximum: 10
          minimum: 0
          type: integer
          description: "This property can be included only if completed is true, and\
            \ in that case it is mandatory."
        review:
          maximum: 1000
          minimum: 0
          exclusiveMinimum: true
          type: string
          description: "This property can be included only if completed is true, and\
            \ in that case it is mandatory."
      example:
        reviewDate: 2000-01-23
        review: review
        filmId: filmId
        rating: 0
        completed: false
        userId: userId
    inline_response_200:
      type: object
      properties:
        totalPages:
          type: integer
        currentPage:
          type: integer
        totalItems:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/user'
        next:
          type: string
      example:
        next: next
        totalItems: 1
        totalPages: 0
        currentPage: 6
        users:
        - password: password
          name: name
          userId: userId
          email: ""
        - password: password
          name: name
          userId: userId
          email: ""
    inline_response_200_1:
      type: object
      properties:
        totalPages:
          type: integer
        currentPage:
          type: integer
        totalItems:
          type: integer
        films:
          type: array
          items:
            $ref: '#/components/schemas/film'
        next:
          type: string
      example:
        next: next
        films:
        - owner: owner
          watchdate: 2000-01-23
          private: true
          filmId: filmId
          rating: 5
          title: title
          favorite: false
        - owner: owner
          watchdate: 2000-01-23
          private: true
          filmId: filmId
          rating: 5
          title: title
          favorite: false
        totalItems: 1
        totalPages: 0
        currentPage: 6
    inline_response_200_2:
      type: object
      properties:
        totalPages:
          type: integer
        currentPage:
          type: integer
        totalItems:
          type: integer
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/review'
        next:
          type: string
      example:
        next: next
        totalItems: 1
        reviews:
        - reviewDate: 2000-01-23
          review: review
          filmId: filmId
          rating: 0
          completed: false
          userId: userId
        - reviewDate: 2000-01-23
          review: review
          filmId: filmId
          rating: 0
          completed: false
          userId: userId
        totalPages: 0
        currentPage: 6
    filmId_invitations_body:
      type: object
      properties:
        users:
          type: array
          items:
            type: integer
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT to identify the authenticated user.
      scheme: bearer
      bearerFormat: JWT
